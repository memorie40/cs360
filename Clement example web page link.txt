mclement.us/basic_html/foo.html

Look here for more info

Create a socket then bind it to the server to tell it to accept connections from the port specified.

Listen specifies the number of connections that we want to be active at once.
tells the computer that we are willing to accept connections on a particular port.

ulimit -a   (tells you the limits of your system)

accept() blocks until it receives a connection from the client creates a new socket to the server for the new client request.int 

int sockent (int addressFamily, int typeOfSockStream, int Protocol)

Uses a C character pointer to point to the first letter of the string in the server Host Name

htons(u_short) port) = host to network order short
The internet assumes big endian byte order.  Must convert from the host order, which is little endian into big endian.

The server will use the field INADDR_ANY which says I will accept a connection from any address.  

Then binds to a network port, with socket address given and length given (the C pointer with the length of the pointer)

Client calls connect (with socket he wants to connect and specifies the address)
Once connected can send data from the socket with b buffer pointer, length, and flags)

Is received by a socket with a character pointer for the buffer, the buffer length, and the flags.

client
sc 

what is a file descriptor

0 (STDIN) pointer to the keyboard (read from this to get keyboard input)
1 (STDOUT) Pointer to screen (write to this to display on screen)
2(STDERR)
3(Socket) pointer to socket  hook up to this 

File descriptor 3 will create socket, Client binds to it
(connections only accepted on 3)  so after accepted it will be assigned a new file descriptor depending on what number is available.  (4, next, then 5,6,etc)
after the connection is connected the socket is passed to file descriptor 4
causes an accept to return file descriptor 4



User space  all devices (the screen, keyboard, phones) are all in user space

Kernal space is used only for operating system calls
